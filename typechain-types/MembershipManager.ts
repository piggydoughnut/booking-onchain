/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MembershipManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "becomeMember"
      | "isMember"
      | "membershipExpiresAt"
      | "owner"
      | "plan"
      | "renewMembership"
      | "transferOwnership"
      | "updatePlan"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MembershipPurchased"
      | "OwnershipTransferred"
      | "PlanUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "becomeMember",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMember",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "membershipExpiresAt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "plan", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renewMembership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlan",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "becomeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "membershipExpiresAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "plan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renewMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePlan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace MembershipPurchasedEvent {
  export type InputTuple = [
    account: AddressLike,
    newExpiry: BigNumberish,
    periodsPaid: BigNumberish,
    amountWei: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    newExpiry: bigint,
    periodsPaid: bigint,
    amountWei: bigint
  ];
  export interface OutputObject {
    account: string;
    newExpiry: bigint;
    periodsPaid: bigint;
    amountWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlanUpdatedEvent {
  export type InputTuple = [
    pricePerPeriod: BigNumberish,
    durationPerPeriod: BigNumberish,
    active: boolean
  ];
  export type OutputTuple = [
    pricePerPeriod: bigint,
    durationPerPeriod: bigint,
    active: boolean
  ];
  export interface OutputObject {
    pricePerPeriod: bigint;
    durationPerPeriod: bigint;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MembershipManager extends BaseContract {
  connect(runner?: ContractRunner | null): MembershipManager;
  waitForDeployment(): Promise<this>;

  interface: MembershipManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  becomeMember: TypedContractMethod<[], [void], "payable">;

  isMember: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  membershipExpiresAt: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  plan: TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean] & {
        pricePerPeriod: bigint;
        durationPerPeriod: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  renewMembership: TypedContractMethod<
    [account: AddressLike],
    [void],
    "payable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePlan: TypedContractMethod<
    [
      pricePerPeriod: BigNumberish,
      durationPerPeriodSeconds: BigNumberish,
      active: boolean
    ],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "becomeMember"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "isMember"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "membershipExpiresAt"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "plan"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean] & {
        pricePerPeriod: bigint;
        durationPerPeriod: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renewMembership"
  ): TypedContractMethod<[account: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePlan"
  ): TypedContractMethod<
    [
      pricePerPeriod: BigNumberish,
      durationPerPeriodSeconds: BigNumberish,
      active: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "MembershipPurchased"
  ): TypedContractEvent<
    MembershipPurchasedEvent.InputTuple,
    MembershipPurchasedEvent.OutputTuple,
    MembershipPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlanUpdated"
  ): TypedContractEvent<
    PlanUpdatedEvent.InputTuple,
    PlanUpdatedEvent.OutputTuple,
    PlanUpdatedEvent.OutputObject
  >;

  filters: {
    "MembershipPurchased(address,uint64,uint256,uint256)": TypedContractEvent<
      MembershipPurchasedEvent.InputTuple,
      MembershipPurchasedEvent.OutputTuple,
      MembershipPurchasedEvent.OutputObject
    >;
    MembershipPurchased: TypedContractEvent<
      MembershipPurchasedEvent.InputTuple,
      MembershipPurchasedEvent.OutputTuple,
      MembershipPurchasedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlanUpdated(uint256,uint64,bool)": TypedContractEvent<
      PlanUpdatedEvent.InputTuple,
      PlanUpdatedEvent.OutputTuple,
      PlanUpdatedEvent.OutputObject
    >;
    PlanUpdated: TypedContractEvent<
      PlanUpdatedEvent.InputTuple,
      PlanUpdatedEvent.OutputTuple,
      PlanUpdatedEvent.OutputObject
    >;
  };
}

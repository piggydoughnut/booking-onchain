/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BookingManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accessNft"
      | "book"
      | "bookings"
      | "listings"
      | "membership"
      | "nextBookingId"
      | "owner"
      | "refund"
      | "release"
      | "setAccessNft"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessNftUpdated"
      | "Booked"
      | "OwnershipTransferred"
      | "Refunded"
      | "Released"
  ): EventFragment;

  encodeFunctionData(functionFragment: "accessNft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "book",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bookings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "listings", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "membership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextBookingId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccessNft",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "accessNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "book", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bookings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "membership", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextBookingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAccessNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AccessNftUpdatedEvent {
  export type InputTuple = [nft: AddressLike];
  export type OutputTuple = [nft: string];
  export interface OutputObject {
    nft: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BookedEvent {
  export type InputTuple = [
    bookingId: BigNumberish,
    listingId: BigNumberish,
    renter: AddressLike,
    startTs: BigNumberish,
    endTs: BigNumberish,
    amountWei: BigNumberish
  ];
  export type OutputTuple = [
    bookingId: bigint,
    listingId: bigint,
    renter: string,
    startTs: bigint,
    endTs: bigint,
    amountWei: bigint
  ];
  export interface OutputObject {
    bookingId: bigint;
    listingId: bigint;
    renter: string;
    startTs: bigint;
    endTs: bigint;
    amountWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundedEvent {
  export type InputTuple = [
    bookingId: BigNumberish,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [bookingId: bigint, to: string, amount: bigint];
  export interface OutputObject {
    bookingId: bigint;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReleasedEvent {
  export type InputTuple = [
    bookingId: BigNumberish,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [bookingId: bigint, to: string, amount: bigint];
  export interface OutputObject {
    bookingId: bigint;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BookingManager extends BaseContract {
  connect(runner?: ContractRunner | null): BookingManager;
  waitForDeployment(): Promise<this>;

  interface: BookingManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accessNft: TypedContractMethod<[], [string], "view">;

  book: TypedContractMethod<
    [listingId: BigNumberish, startTs: BigNumberish, endTs: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  bookings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        renter: string;
        listingId: bigint;
        startTs: bigint;
        endTs: bigint;
        amount: bigint;
        released: boolean;
      }
    ],
    "view"
  >;

  listings: TypedContractMethod<[], [string], "view">;

  membership: TypedContractMethod<[], [string], "view">;

  nextBookingId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  refund: TypedContractMethod<[bookingId: BigNumberish], [void], "nonpayable">;

  release: TypedContractMethod<[bookingId: BigNumberish], [void], "nonpayable">;

  setAccessNft: TypedContractMethod<[nft: AddressLike], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accessNft"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "book"
  ): TypedContractMethod<
    [listingId: BigNumberish, startTs: BigNumberish, endTs: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bookings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        renter: string;
        listingId: bigint;
        startTs: bigint;
        endTs: bigint;
        amount: bigint;
        released: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "listings"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "membership"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextBookingId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[bookingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "release"
  ): TypedContractMethod<[bookingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAccessNft"
  ): TypedContractMethod<[nft: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AccessNftUpdated"
  ): TypedContractEvent<
    AccessNftUpdatedEvent.InputTuple,
    AccessNftUpdatedEvent.OutputTuple,
    AccessNftUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Booked"
  ): TypedContractEvent<
    BookedEvent.InputTuple,
    BookedEvent.OutputTuple,
    BookedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Refunded"
  ): TypedContractEvent<
    RefundedEvent.InputTuple,
    RefundedEvent.OutputTuple,
    RefundedEvent.OutputObject
  >;
  getEvent(
    key: "Released"
  ): TypedContractEvent<
    ReleasedEvent.InputTuple,
    ReleasedEvent.OutputTuple,
    ReleasedEvent.OutputObject
  >;

  filters: {
    "AccessNftUpdated(address)": TypedContractEvent<
      AccessNftUpdatedEvent.InputTuple,
      AccessNftUpdatedEvent.OutputTuple,
      AccessNftUpdatedEvent.OutputObject
    >;
    AccessNftUpdated: TypedContractEvent<
      AccessNftUpdatedEvent.InputTuple,
      AccessNftUpdatedEvent.OutputTuple,
      AccessNftUpdatedEvent.OutputObject
    >;

    "Booked(uint256,uint256,address,uint64,uint64,uint256)": TypedContractEvent<
      BookedEvent.InputTuple,
      BookedEvent.OutputTuple,
      BookedEvent.OutputObject
    >;
    Booked: TypedContractEvent<
      BookedEvent.InputTuple,
      BookedEvent.OutputTuple,
      BookedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Refunded(uint256,address,uint256)": TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;
    Refunded: TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;

    "Released(uint256,address,uint256)": TypedContractEvent<
      ReleasedEvent.InputTuple,
      ReleasedEvent.OutputTuple,
      ReleasedEvent.OutputObject
    >;
    Released: TypedContractEvent<
      ReleasedEvent.InputTuple,
      ReleasedEvent.OutputTuple,
      ReleasedEvent.OutputObject
    >;
  };
}

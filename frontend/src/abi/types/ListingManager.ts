/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ListingManager {
  export type IntervalStruct = { startTs: BigNumberish; endTs: BigNumberish };

  export type IntervalStructOutput = [startTs: bigint, endTs: bigint] & {
    startTs: bigint;
    endTs: bigint;
  };
}

export interface ListingManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "blockInterval"
      | "bookingManager"
      | "createListing"
      | "getBookedIntervals"
      | "getListing"
      | "getListingOwner"
      | "getListingPricePerHour"
      | "isAvailable"
      | "nextListingId"
      | "owner"
      | "setBookingManager"
      | "transferOwnership"
      | "updateListing"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BookingManagerUpdated"
      | "IntervalBlocked"
      | "ListingCreated"
      | "ListingUpdated"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "blockInterval",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bookingManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createListing",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBookedIntervals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListingOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListingPricePerHour",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAvailable",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextListingId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBookingManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateListing",
    values: [BigNumberish, BigNumberish, string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "blockInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bookingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBookedIntervals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getListingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListingPricePerHour",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextListingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBookingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateListing",
    data: BytesLike
  ): Result;
}

export namespace BookingManagerUpdatedEvent {
  export type InputTuple = [bookingManager: AddressLike];
  export type OutputTuple = [bookingManager: string];
  export interface OutputObject {
    bookingManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IntervalBlockedEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    startTs: BigNumberish,
    endTs: BigNumberish
  ];
  export type OutputTuple = [listingId: bigint, startTs: bigint, endTs: bigint];
  export interface OutputObject {
    listingId: bigint;
    startTs: bigint;
    endTs: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingCreatedEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    owner: AddressLike,
    pricePerHour: BigNumberish,
    cid: string
  ];
  export type OutputTuple = [
    listingId: bigint,
    owner: string,
    pricePerHour: bigint,
    cid: string
  ];
  export interface OutputObject {
    listingId: bigint;
    owner: string;
    pricePerHour: bigint;
    cid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingUpdatedEvent {
  export type InputTuple = [listingId: BigNumberish];
  export type OutputTuple = [listingId: bigint];
  export interface OutputObject {
    listingId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ListingManager extends BaseContract {
  connect(runner?: ContractRunner | null): ListingManager;
  waitForDeployment(): Promise<this>;

  interface: ListingManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  blockInterval: TypedContractMethod<
    [listingId: BigNumberish, startTs: BigNumberish, endTs: BigNumberish],
    [void],
    "nonpayable"
  >;

  bookingManager: TypedContractMethod<[], [string], "view">;

  createListing: TypedContractMethod<
    [pricePerHour: BigNumberish, metadataCID: string],
    [bigint],
    "nonpayable"
  >;

  getBookedIntervals: TypedContractMethod<
    [listingId: BigNumberish],
    [ListingManager.IntervalStructOutput[]],
    "view"
  >;

  getListing: TypedContractMethod<
    [listingId: BigNumberish],
    [
      [string, bigint, string, boolean] & {
        owner: string;
        pricePerHour: bigint;
        metadataCID: string;
        active: boolean;
      }
    ],
    "view"
  >;

  getListingOwner: TypedContractMethod<
    [listingId: BigNumberish],
    [string],
    "view"
  >;

  getListingPricePerHour: TypedContractMethod<
    [listingId: BigNumberish],
    [bigint],
    "view"
  >;

  isAvailable: TypedContractMethod<
    [listingId: BigNumberish, startTs: BigNumberish, endTs: BigNumberish],
    [boolean],
    "view"
  >;

  nextListingId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  setBookingManager: TypedContractMethod<
    [mgr: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateListing: TypedContractMethod<
    [
      listingId: BigNumberish,
      pricePerHour: BigNumberish,
      metadataCID: string,
      active: boolean
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "blockInterval"
  ): TypedContractMethod<
    [listingId: BigNumberish, startTs: BigNumberish, endTs: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bookingManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createListing"
  ): TypedContractMethod<
    [pricePerHour: BigNumberish, metadataCID: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBookedIntervals"
  ): TypedContractMethod<
    [listingId: BigNumberish],
    [ListingManager.IntervalStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getListing"
  ): TypedContractMethod<
    [listingId: BigNumberish],
    [
      [string, bigint, string, boolean] & {
        owner: string;
        pricePerHour: bigint;
        metadataCID: string;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getListingOwner"
  ): TypedContractMethod<[listingId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getListingPricePerHour"
  ): TypedContractMethod<[listingId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "isAvailable"
  ): TypedContractMethod<
    [listingId: BigNumberish, startTs: BigNumberish, endTs: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextListingId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setBookingManager"
  ): TypedContractMethod<[mgr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateListing"
  ): TypedContractMethod<
    [
      listingId: BigNumberish,
      pricePerHour: BigNumberish,
      metadataCID: string,
      active: boolean
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BookingManagerUpdated"
  ): TypedContractEvent<
    BookingManagerUpdatedEvent.InputTuple,
    BookingManagerUpdatedEvent.OutputTuple,
    BookingManagerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "IntervalBlocked"
  ): TypedContractEvent<
    IntervalBlockedEvent.InputTuple,
    IntervalBlockedEvent.OutputTuple,
    IntervalBlockedEvent.OutputObject
  >;
  getEvent(
    key: "ListingCreated"
  ): TypedContractEvent<
    ListingCreatedEvent.InputTuple,
    ListingCreatedEvent.OutputTuple,
    ListingCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ListingUpdated"
  ): TypedContractEvent<
    ListingUpdatedEvent.InputTuple,
    ListingUpdatedEvent.OutputTuple,
    ListingUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "BookingManagerUpdated(address)": TypedContractEvent<
      BookingManagerUpdatedEvent.InputTuple,
      BookingManagerUpdatedEvent.OutputTuple,
      BookingManagerUpdatedEvent.OutputObject
    >;
    BookingManagerUpdated: TypedContractEvent<
      BookingManagerUpdatedEvent.InputTuple,
      BookingManagerUpdatedEvent.OutputTuple,
      BookingManagerUpdatedEvent.OutputObject
    >;

    "IntervalBlocked(uint256,uint64,uint64)": TypedContractEvent<
      IntervalBlockedEvent.InputTuple,
      IntervalBlockedEvent.OutputTuple,
      IntervalBlockedEvent.OutputObject
    >;
    IntervalBlocked: TypedContractEvent<
      IntervalBlockedEvent.InputTuple,
      IntervalBlockedEvent.OutputTuple,
      IntervalBlockedEvent.OutputObject
    >;

    "ListingCreated(uint256,address,uint256,string)": TypedContractEvent<
      ListingCreatedEvent.InputTuple,
      ListingCreatedEvent.OutputTuple,
      ListingCreatedEvent.OutputObject
    >;
    ListingCreated: TypedContractEvent<
      ListingCreatedEvent.InputTuple,
      ListingCreatedEvent.OutputTuple,
      ListingCreatedEvent.OutputObject
    >;

    "ListingUpdated(uint256)": TypedContractEvent<
      ListingUpdatedEvent.InputTuple,
      ListingUpdatedEvent.OutputTuple,
      ListingUpdatedEvent.OutputObject
    >;
    ListingUpdated: TypedContractEvent<
      ListingUpdatedEvent.InputTuple,
      ListingUpdatedEvent.OutputTuple,
      ListingUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
